import torch
from argparse import ArgumentParser
import os
from utils import read_GeoQuery, data_iterator
from pytorch_pretrained_bert.modeling import BertModel
from tokens_vocab import Vocab
import domains
from semantic_parser import TSP, BSP
from utils import get_dataset_finish_by, save_model, get_dataset, load_model
from tensorboardX import SummaryWriter
import time
import math
import numpy as np
from tqdm import tqdm

parser = ArgumentParser()
parser.add_argument("--data_folder", type=str, default="geoQueryData")
parser.add_argument("--out_folder", type=str, default="outputs")
parser.add_argument("--BERT", default="bert-base-uncased", type=str, help="bert-base-uncased, bert-large-uncased")
parser.add_argument("--batch_size", default=16, type=int)
parser.add_argument("--clip_grad", default=5.0, type=float)
parser.add_argument("--d_model", default=128, type=int)
parser.add_argument("--d_int", default=512, type=int)
parser.add_argument("--dropout", default=0.1, type=float)
parser.add_argument("--lr", default=0.001, type=float)
parser.add_argument("--models_path", default='models', type=str)
parser.add_argument("--epoch_to_load", default=40, type=int)
parser.add_argument("--seed", default=1515, type=int)
parser.add_argument("--shuffle", default=True, type=bool)
parser.add_argument("--log_dir", default='logs', type=str)
parser.add_argument("--log", default=True, type=bool)
parser.add_argument("--epochs", default=50, type=int)
parser.add_argument("--save_every", default=5, type=int)
parser.add_argument("--n_layers", default=2, type=int)
parser.add_argument("--decoding", default='greedy', type=str)
parser.add_argument("--evaluation", default='strict', type=str)
parser.add_argument("--beam_size", default=5, type=int)
parser.add_argument("--max_decode_len", default=105, type=int)
parser.add_argument("--domain", default='geoquery', type=str)


def main(arg_parser):
    # seed the random number generators
    seed = arg_parser.seed
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    np.random.seed(seed * 13 // 7)
    if arg_parser.train:
        train(arg_parser)
    if arg_parser.test:
        test(arg_parser)
    return


def train(arg_parser):
    train_dataset = get_dataset_finish_by(arg_parser.data_folder, 'train','600.tsv')
    test_dataset = get_dataset_finish_by(arg_parser.data_folder, 'dev', '100.tsv')
    vocab = Vocab(arg_parser.BERT)
    model = TSP(input_vocab=vocab, target_vocab=vocab, d_model=arg_parser.d_model, d_int=arg_parser.d_model,
                n_layers=arg_parser.n_layers, dropout_rate=arg_parser.dropout)

    model.train()

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model = model.to(device)

    optimizer = torch.optim.Adam(model.parameters(), lr=arg_parser.lr)

    if not os.path.isdir(arg_parser.log_dir):
        os.makedirs(arg_parser.log_dir)

    summary_writer = SummaryWriter(log_dir=arg_parser.log_dir) if arg_parser.log else None

    n_train = len(train_dataset)
    n_test = len(test_dataset)

    for epoch in range(arg_parser.epochs):
        running_loss = 0.0
        last_log_time = time.time()

        # Training
        train_loss = 0.0
        for batch_idx, batch_examples in enumerate(
                data_iterator(train_dataset, batch_size=arg_parser.batch_size, shuffle=arg_parser.shuffle)):
            if ((batch_idx % 100) == 0) and batch_idx > 1:
                print("epoch {} | batch {} | mean running loss {:.2f} | {:.2f} batch/s".format(epoch, batch_idx,
                                                                                               running_loss / 100,
                                                                                               100 / (
                                                                                                       time.time() - last_log_time)))
                last_log_time = time.time()
                running_loss = 0.0

            sources, targets = batch_examples[0], batch_examples[1]
            example_losses = -model(sources, targets)  # (batch_size,)
            batch_loss = example_losses.sum()
            loss = batch_loss / arg_parser.batch_size

            # clip gradient
            grad_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), arg_parser.clip_grad)

            # if batch_idx % 100 == 0:
            #     print("{:.2f}".format(loss))

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            # add loss
            running_loss += loss.item()
            train_loss += loss.item()

        print("Epoch train loss : {}".format(math.sqrt(train_loss / math.ceil(n_train / arg_parser.batch_size))))

        if summary_writer is not None:
            summary_writer.add_scalar("train/loss",
                                      train_loss / math.ceil(n_train / arg_parser.batch_size),
                                      global_step=epoch)
        if (epoch % arg_parser.save_every == 0) and arg_parser.log and epoch > 0:
            save_model(arg_parser.models_path, "{}_epoch_{}.pt".format('TSP', epoch), model,
                       device)
        ## TEST
        test_loss = 0.0

        for batch_idx, batch_examples in enumerate(
                data_iterator(test_dataset, batch_size=arg_parser.batch_size,
                              shuffle=arg_parser.shuffle)):
            with torch.no_grad():
                sources, targets = batch_examples[0], batch_examples[1]
                example_losses = -model(sources, targets)  # (batch_size,)
                batch_loss = example_losses.sum()
                loss = batch_loss / arg_parser.batch_size

                test_loss += loss.item()

        if summary_writer is not None:
            summary_writer.add_scalar("test/loss", test_loss / math.ceil(n_test / arg_parser.batch_size),
                                      global_step=epoch)
        print("TEST loss | epoch {} | {:.2f}".format(epoch, test_loss / math.ceil(n_test / arg_parser.batch_size)))

    return None


# TODO beam_search and knowledge_based eval
def test(arg_parser):
    test_dataset = get_dataset_finish_by(arg_parser.data_folder, 'test','280.tsv')
    vocab = Vocab(arg_parser.BERT)
    file_path = os.path.join(arg_parser.models_path, f"TSP_epoch_{arg_parser.epoch_to_load}.pt")
    model = TSP(input_vocab=vocab, target_vocab=vocab, d_model=arg_parser.d_model, d_int=arg_parser.d_model,
                n_layers=arg_parser.n_layers, dropout_rate=arg_parser.dropout)
    load_model(file_path=file_path, model=model)
    evaluation_methods = {'strict': dirty_evaluation, 'soft': knowledge_based_evaluation}

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model = model.to(device)

    top_parsing_outputs, gold_queries = decoding(model, test_dataset, arg_parser)

    knowledge_based_evaluation(top_parsing_outputs, gold_queries, domain = arg_parser.domain)

    # top_parsing_outputs = [parsing_output[0] for parsing_output in parsing_outputs]
    #
    # test_accuracy = evaluation_methods[arg_parser.evaluation](parsing_outputs, gold_queries, vocab)
    # print(
    #     f"test accuracy for model {arg_parser.evaluation}_{arg_parser.decoding}_TSP_{arg_parser.epoch_to_load}: {test_accuracy:2f}")
    #
    # outfile = os.path.join(arg_parser.data_folder, os.path.join(arg_parser.out_folder,
    #                                                             f"{arg_parser.evaluation}_{arg_parser.decoding}_TSP_{arg_parser.epoch_to_load}.txt"))
    # with open(outfile, 'w') as f:
    #     for parsing_output in parsing_outputs:
    #         f.write(parsing_output + '\n')
    return None


def decoding(loaded_model, test_dataset, arg_parser):
    beam_size = arg_parser.beam_size
    max_len = arg_parser.max_decode_len
    decoding_method = loaded_model.beam_search if arg_parser.decoding == 'beam_search' else loaded_model.decode_greedy
    loaded_model.eval()
    hypotheses = []
    gold_queries = []
    scores = 0
    count = 0
    with torch.no_grad():
        for src_sent_batch, gold_target in tqdm(data_iterator(test_dataset, batch_size=1, shuffle=False), total=280):
            example_hyps = decoding_method(sources=src_sent_batch, max_len=max_len, beam_size=beam_size)
            hypotheses.append(example_hyps)
            gold_tokens_list = loaded_model.target_vocab.to_input_tokens(gold_target)
            current_score = jaccard(example_hyps[0][1:], gold_tokens_list[0])
            if current_score == 1:
                scores += 1
            count += 1
            gold_queries.append(gold_target[0])
    print(count)
    print(f"score obtained is {scores / count:.2f}")
    return hypotheses, gold_queries


def jaccard(tokens1, tokens2):
    set1 = set(tokens1)
    set2 = set(tokens2)
    score = len(set1 & set2) / len(set1 | set2)
    return score

def dirty_evaluation(model_queries, gold_queries, vocab):
    n = len(model_queries)
    print(n)
    gold_tokens_list = vocab.to_input_tokens(gold_queries)
    assert n == len(gold_queries)
    score = 0
    for i in tqdm(range(n)):
        set1 = set(gold_queries[i])
        set2 = set(gold_tokens_list[i])
        score += len(set1 & set2) / len(set1 | set2)
    return score / n


def strict_evaluation(model_queries, gold_queries):
    n = len(model_queries)
    assert n == len(gold_queries)
    return sum([model_queries[x] == gold_queries[x] for x in range(n)]) / n


def knowledge_based_evaluation(model_queries, gold_queries, domain = domains.GeoqueryDomain()):
    '''
    Evaluate the model through knowledge-base metrics
    '''
    is_correct_list = []
    tokens_correct_list = []
    x_len_list = []
    y_len_list = []
    
    #print("This is the predicted queries \n", model_queries[0][0])
    #print("This is the expected queries \n", gold_queries)

    if domain:
    #    all_derivs = [decoding_method(sources=ex, max_len=max_len, beam_size=beam_size) for ex in dataset]
    #    true_answers = [ex for ex in dataset]
        derivs, denotation_correct_list = domain.compare_answers(model_queries, gold_queries)
    #else:
    #    derivs = [decoding_method(model, ex)[0] for ex in dataset]
    #    denotation_correct_list = None

    for i, ex in enumerate(dataset):
        print('Example %d' % i)
        print('  x      = "%s"' % ex.x_str)
        print('  y      = "%s"' % ex.y_str)
        prob = derivs[i].p
        y_pred_toks = derivs[i].y_toks
        y_pred_str = ' '.join(y_pred_toks)

    # Compute accuracy metrics
        is_correct = (y_pred_str == ex.y_str)
        tokens_correct = sum(a == b for a, b in zip(y_pred_toks, ex.y_toks))
        is_correct_list.append(is_correct)
        tokens_correct_list.append(tokens_correct)
        x_len_list.append(len(ex.x_toks))
        y_len_list.append(len(ex.y_toks))
        print('  y_pred = "%s"' % y_pred_str)
        print('  sequence correct = %s' % is_correct)
        print('  token accuracy = %d/%d = %g' % (tokens_correct, len(ex.y_toks), float(tokens_correct) / len(ex.y_toks)))
        if denotation_correct_list:
       	    denotation_correct = denotation_correct_list[i]
            print('  denotation correct = %s' % denotation_correct)
    #print_accuracy_metrics(name, is_correct_list, tokens_correct_list,
    #                     x_len_list, y_len_list, denotation_correct_list)

if __name__ == '__main__':
    args = parser.parse_args()
    #train(args)
    #test(args)
    model_queries = [[['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'area', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'rhode', '(', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'ohio', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'pennsylvania', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '_', 'city', '(', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'lowest', '(', 'c', ',', '(', '_', 'place', '(', 'c', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'd', ')', ',', '_', 'con', '##st', '(', 'd', ',', '_', 'city', '##id', '(', 'atlanta', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'louisiana', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'maryland', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'boulder', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'high', '_', 'point', '(', 'b', ',', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'montgomery', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'river', '(', 'c', ')', ',', '_', 'traverse', '(', 'c', ',', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'ohio', ')', ')', ',', '_', 'river', '(', 'b', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'kentucky', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'south', 'dakota', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'city', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'mississippi', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'kansas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'boulder', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'seattle', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', "'", ')', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'tennessee', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'california', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'mexico', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'city', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', "'", 'guadalupe', '0', ')', ')', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'idaho', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'alabama', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'traverse', '(', 'b', ',', 'c', ')', ',', '_', 'state', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'capital', '(', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'city', '##id', '(', "'", 'des', 'moines', "'", ',', '_', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'capital', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'utah', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'mexico', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'ohio', ')', ')', ',', '_', 'traverse', '(', 'b', ',', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'highest', '(', 'b', ',', '_', 'place', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'population', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'alaska', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'city', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'capital', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'dover', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'city', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'minnesota', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'indiana', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'illinois', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'most', '(', 'c', ',', 'd', ')', ',', '_', 'state', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'colorado', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'river', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'kentucky', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'nevada', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ',', '_', 'density', '(', 'a', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'flint', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'city', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'city', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'utah', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'montana', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'york', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'c', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'c', ',', 'c', ')', ',', '_', 'state', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '\\', '+', '(', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'highest', '(', 'b', ',', '_', 'place', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'austin', ',', '_', ')', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'highest', '(', 'b', ',', '(', '_', 'place', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'alabama', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'river', '(', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'colorado', ')', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'river', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'austin', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'wyoming', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', "'", 'mount', 'mckinley', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'area', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'california', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'largest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'river', '(', 'b', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'largest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'ohio', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'lowest', '(', 'b', ',', '_', 'place', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', "'", 'san', 'francisco', "'", ',', '_', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'iowa', ')', ')', ',', '_', 'next', '_', 'to', '(', 'c', ',', 'b', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'river', '(', 'b', ')', ',', '_', 'traverse', '(', 'c', ',', 'a', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'utah', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'river', '(', 'c', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'population', '(', 'a', ',', 'b', ')', ',', '_', 'city', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'longest', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'place', '##id', '(', "'", 'mount', 'mckinley', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'california', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'b', ',', '_', 'state', '(', 'b', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'montana', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'alaska', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'sum', '(', 'c', ',', '_', 'state', '(', 'c', ')', ',', '_', 'area', '(', 'c', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'louisiana', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '_', 'state', '(', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'iowa', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'mississippi', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'hawaii', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'iowa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'traverse', '(', 'c', ',', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'iowa', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'hawaii', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'size', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'alaska', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'wyoming', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ',', '_', 'population', '(', 'a', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'york', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'river', '(', 'c', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'maryland', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'smallest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'density', '(', 'b', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'rochester', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'state', '(', 'c', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'largest', '(', 'c', ',', '(', '_', 'state', '(', 'c', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'area', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'austin', ',', 'tx', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'colorado', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'colorado', ')', ')', ',', '_', 'river', '(', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'rochester', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ',', '_', 'population', '(', 'c', ',', 'a', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'b', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'washington', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'kentucky', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'city', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'austin', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'most', '(', 'c', ',', 'd', ',', '(', '_', 'state', '(', 'c', ')', ',', '_', 'longer', '(', 'd', ',', 'd', ')', ',', '_', 'river', '(', 'd', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'mexico', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'density', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'maine', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'traverse', '(', 'b', ',', 'c', ')', ',', '_', 'state', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'missouri', ')', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'river', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'mexico', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'missouri', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'place', '##id', '(', "'", 'mount', 'mckinley', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'delaware', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'pittsburgh', ',', '_', ')', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'b', ',', '_', 'lowest', '(', 'b', ',', '(', '_', 'place', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'traverse', '(', 'c', ',', 'a', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'river', '(', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'louisiana', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'population', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'florida', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'austin', ',', 'tx', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'alaska', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'delaware', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'pennsylvania', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'alaska', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'largest', '(', 'b', ',', '_', 'city', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'mountain', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'washington', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'place', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'york', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'mountain', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'place', '(', 'b', ')', ',', '_', 'higher', '(', 'b', ',', 'c', ')', ',', '_', 'lowest', '(', 'c', ',', '(', '_', 'place', '(', 'c', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'd', ')', ',', '_', 'con', '##st', '(', 'd', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', "'", 'fort', 'wayne', "'", ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'mountain', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'highest', '(', 'b', ',', '(', '_', 'place', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'density', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'york', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', "'", 'san', 'francisco', "'", ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', "'", 'rhode', 'island', "'", ')', ')', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'mexico', "'", ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'ohio', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'longest', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'area', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '\\', '+', '(', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'river', '(', 'b', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'york', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'rhode', 'island', "'", ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'south', 'dakota', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'maine', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'minnesota', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'usa', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'colorado', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'largest', '(', 'b', ',', '_', 'state', '(', 'b', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'lowest', '(', 'c', ',', '_', 'place', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'longest', '(', 'b', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'iowa', ')', ')', ',', '_', 'next', '_', 'to', '(', 'c', ',', 'b', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'lo', '##c', '(', 'c', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'area', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'ohio', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'longest', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '\\', '+', '(', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'c', ')', ',', '_', 'state', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'longest', '(', 'b', ',', '_', 'river', '(', 'b', ')', ')', ',', '_', 'traverse', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'city', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'largest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'largest', '(', 'c', ',', '_', 'state', '(', 'c', ')', ',', '_', 'population', '(', 'c', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'wyoming', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'mountain', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'alabama', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'b', ',', 'c', ',', '_', 'state', '(', 'b', ')', ',', '_', 'next', '_', 'to', '(', 'b', ',', 'c', ')', ',', '_', 'state', '(', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'hawaii', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'density', '(', 'b', ',', 'a', ')', ',', '_', 'largest', '(', 'b', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', "'", 'des', 'moines', "'", ',', '_', ')', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'highest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'illinois', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'kentucky', ')', ')', ',', '_', 'next', '_', 'to', '(', 'c', ',', 'b', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'rhode', 'island', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'city', '##id', '(', 'boulder', ',', '_', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'most', '(', 'c', ',', 'c', ',', '(', '_', 'river', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'c', ')', ',', '_', 'most', '(', 'c', ',', '_', 'place', '(', 'c', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'michigan', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'arkansas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'len', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'missouri', ')', ')', ',', '_', 'river', '(', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'largest', '(', 'c', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'population', '(', 'b', ',', 'c', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', "'", 'new', 'york', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'river', '(', 'a', ')', ',', '_', 'traverse', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', "'", 'north', 'carolina', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'city', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'capital', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'river', '(', 'c', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'river', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'capital', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'idaho', ')', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'smallest', '(', 'c', ',', '(', '_', 'state', '(', 'c', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'd', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'city', '##id', '(', 'mississippi', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ',', '_', 'major', '(', 'b', ')', ',', '_', 'city', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'a', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'population', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'highest', '(', 'b', ',', '(', '_', 'place', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'state', '##id', '(', 'montana', ')', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'smallest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', "'", 'rio', 'grande', "'", ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'area', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'major', '(', 'a', ')', ',', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'washington', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'elevation', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'missouri', ')', ')', ',', '_', 'river', '(', 'b', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'utah', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'count', '(', 'b', ',', '(', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'b', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'c', ',', '_', 'country', '##id', '(', 'usa', ')', ')', ')', ',', 'a', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'arizona', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'lowest', '(', 'a', ',', '(', '_', 'place', '(', 'a', ')', ',', '_', 'lo', '##c', '(', 'a', ',', 'b', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'arkansas', ')', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'a', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'river', '##id', '(', 'mississippi', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'most', '(', 'a', ',', 'b', ',', '(', '_', 'state', '(', 'a', ')', ',', '_', 'next', '_', 'to', '(', 'a', ',', 'b', ')', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '_', 'largest', '(', 'b', ',', '(', '_', 'city', '(', 'a', ')', ',', '_', 'density', '(', 'a', ',', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'area', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'wisconsin', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'size', '(', 'b', ',', 'a', ')', ',', '_', 'con', '##st', '(', 'b', ',', '_', 'state', '##id', '(', 'texas', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'population', '(', 'b', ',', 'a', ')', ',', '_', 'smallest', '(', 'b', ',', '_', 'state', '(', 'b', ')', ')', ')', ')']], [['[START]', '_', 'answer', '(', 'a', ',', '(', '_', 'density', '(', 'b', ',', 'a', ')', ',', '_', 'state', '(', 'b', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'b', ')', ',', '_', 'smallest', '(', 'c', ',', '_', 'state', '(', 'c', ')', ',', '_', 'lo', '##c', '(', 'c', ',', 'c', ')', ',', '_', 'con', '##st', '(', 'd', ',', '_', 'river', '##id', '(', 'usa', ')', ')', ')', ')', ')']]]
    gold_queries = ['_answer ( A , _smallest ( A , _state ( A ) ) )', '_answer ( A , _longest ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _state ( B ) ) ) )', '_answer ( A , ( _major ( A ) , _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ohio ) ) ) )', '_answer ( A , ( _major ( A ) , _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( florida ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( erie , pa ) ) ) )', '_answer ( A , _smallest ( B , ( _state ( A ) , _density ( A , B ) ) ) )', '_answer ( A , ( _loc ( B , A ) , _smallest ( B , _city ( B ) ) ) )', '_answer ( A , ( _river ( A ) , _traverse ( A , B ) , _state ( B ) , _next_to ( B , C ) , _state ( C ) , _loc ( D , C ) , _capital ( D ) , _const ( D , _cityid ( austin , _ ) ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( massachusetts ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( maryland ) ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _riverid ( mississippi ) ) , _river ( B ) , _traverse ( B , A ) ) )', '_answer ( A , ( _loc ( B , A ) , _const ( B , _cityid ( portland , _ ) ) ) )', '_answer ( A , ( _city ( A ) , _loc ( A , B ) , _state ( B ) , _traverse ( C , B ) , _const ( C , _riverid ( mississippi ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( houston , _ ) ) ) )', '_answer ( A , ( _population ( B , A ) , _state ( B ) , _const ( C , _riverid ( mississippi ) ) , _river ( C ) , _traverse ( C , B ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _riverid ( ohio ) ) , _river ( B ) , _traverse ( B , A ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _population ( A , B ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( kentucky ) ) ) )', "_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ' north dakota ' ) ) ) )", '_answer ( A , _count ( B , ( _city ( B ) , _loc ( B , C ) , _const ( C , _countryid ( usa ) ) ) , A ) )', '_answer ( A , _largest ( A , ( _capital ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( texas ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _state ( B ) , _loc ( C , B ) , _city ( C ) , _const ( C , _cityid ( durham , _ ) ) ) )', '_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( kansas ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( boulder , _ ) ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _population ( A , B ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( houston , _ ) ) ) )', '_answer ( A , _count ( B , _state ( B ) , A ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _smallest ( C , ( _state ( B ) , _area ( B , C ) ) ) ) )', '_answer ( A , _longest ( A , ( _river ( A ) , _traverse ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( indiana ) ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _largest ( C , ( _population ( B , C ) , _state ( B ) ) ) ) )', '_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( california ) ) ) ) )', '_answer ( A , _longest ( A , ( _river ( A ) , _loc ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( nebraska ) ) ) ) )', "_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ' new jersey ' ) ) ) )", '_answer ( A , _most ( A , B , ( _state ( A ) , _loc ( B , A ) , _major ( B ) , _city ( B ) ) ) )', '_answer ( A , _count ( B , ( _const ( B , _riverid ( colorado ) ) , _river ( B ) ) , A ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', "_answer ( A , ( _population ( B , A ) , _largest ( B , ( _city ( B ) , _loc ( B , C ) , _const ( C , _stateid ( ' new york ' ) ) , _state ( C ) ) ) ) )", '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( missouri ) ) ) )', '_answer ( A , ( _len ( B , A ) , _most ( B , C , ( _river ( B ) , _traverse ( B , C ) , _state ( C ) ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _state ( B ) , _loc ( C , B ) , _capital ( C ) , _const ( C , _cityid ( austin , _ ) ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _largest ( B , _capital ( B ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( massachusetts ) ) ) )', "_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( ' new jersey ' ) ) ) )", '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _state ( B ) , _const ( C , _riverid ( ohio ) ) , _traverse ( C , B ) ) )', '_answer ( A , _highest ( B , ( _state ( A ) , _loc ( B , A ) , _place ( B ) ) ) )', '_answer ( A , _largest ( B , ( _population ( A , B ) , _state ( A ) , _const ( C , _riverid ( mississippi ) ) , _traverse ( C , A ) ) ) )', '_answer ( A , _highest ( A , ( _mountain ( A ) , \\+ ( _loc ( A , B ) , _const ( B , _stateid ( alaska ) ) ) ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _loc ( B , A ) , _major ( B ) , _city ( B ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _city ( B ) , _const ( B , _cityid ( portland , _ ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _smallest ( C , ( _state ( B ) , _density ( B , C ) ) ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _most ( B , C , ( _state ( B ) , _loc ( C , B ) , _major ( C ) , _city ( C ) ) ) ) )', '_answer ( A , _smallest ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( hawaii ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( indiana ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _loc ( B , C ) , _const ( C , _countryid ( usa ) ) ) , A ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( illinois ) ) ) )', '_answer ( A , ( _river ( A ) , _traverse ( A , B ) , _most ( B , C , ( _state ( B ) , _next_to ( B , C ) , _state ( C ) ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _most ( B , C , ( _state ( B ) , _next_to ( B , C ) , _state ( C ) ) ) ) )', '_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( colorado ) ) , _river ( B ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _longest ( B , _river ( B ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( kentucky ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( utah ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _largest ( C , ( _state ( B ) , _density ( B , C ) ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _city ( B ) , _const ( B , _cityid ( plano , _ ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _most ( B , C , ( _state ( B ) , _loc ( C , B ) , _city ( C ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _largest ( B , _city ( B ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( utah ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( montana ) ) ) )', "_answer ( A , ( _river ( A ) , _traverse ( A , B ) , _const ( B , _stateid ( ' new york ' ) ) ) )", '_answer ( A , ( _river ( A ) , _traverse ( A , B ) , _most ( B , C , ( _state ( B ) , _next_to ( B , C ) , _state ( C ) ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _loc ( C , B ) , _low_point ( B , C ) , _lower ( C , D ) , _low_point ( E , D ) , _const ( E , _stateid ( alabama ) ) , _loc ( D , E ) ) , A ) )', '_answer ( A , _most ( A , B , ( _river ( A ) , _traverse ( A , B ) , _state ( B ) ) ) )', '_answer ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _highest ( B , _place ( B ) ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _cityid ( austin , _ ) ) , _loc ( B , A ) ) )', '_answer ( A , ( _elevation ( B , A ) , _highest ( B , ( _place ( B ) , _loc ( B , C ) , _const ( C , _stateid ( alabama ) ) ) ) ) )', '_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( mississippi ) ) , _river ( B ) ) )', '_answer ( A , _count ( B , ( _river ( B ) , _const ( C , _stateid ( colorado ) ) , _loc ( B , C ) ) , A ) )', '_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( mississippi ) ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _loc ( B , A ) , _river ( B ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( austin , _ ) ) ) )', '_answer ( A , _largest ( B , ( _city ( A ) , _loc ( A , C ) , _const ( C , _countryid ( usa ) ) , _density ( A , B ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _river ( B ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _area ( B , A ) , _const ( B , _stateid ( florida ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( california ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _largest ( C , ( _state ( B ) , _population ( B , C ) ) ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _loc ( B , A ) , _major ( B ) , _river ( B ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _largest ( C , ( _state ( B ) , _population ( B , C ) ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ohio ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _lowest ( B , _place ( B ) ) ) )', "_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( ' san antonio ' , _ ) ) ) )", '_answer ( A , _count ( B , ( _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( iowa ) ) ) , A ) )', '_answer ( A , ( _state ( A ) , _const ( B , _riverid ( chattahoochee ) ) , _river ( B ) , _traverse ( B , A ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( detroit , _ ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , \\+ ( _loc ( C , B ) , _river ( C ) ) ) , A ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( mississippi ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) )', '_answer ( A , _largest ( B , ( _population ( A , B ) , _city ( A ) ) ) )', '_answer ( A , ( _len ( B , A ) , _longest ( B , ( _river ( B ) , _traverse ( B , C ) , _const ( C , _stateid ( texas ) ) ) ) ) )', "_answer ( A , ( _elevation ( B , A ) , _const ( B , _placeid ( ' mount mckinley ' ) ) ) )", '_answer ( A , _smallest ( B , ( _state ( A ) , _density ( A , B ) ) ) )', '_answer ( A , _count ( B , ( _river ( B ) , _loc ( B , C ) , _const ( C , _stateid ( california ) ) ) , A ) )', '_answer ( A , _largest ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( washington ) ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( florida ) ) , _state ( B ) ) )', '_answer ( A , _largest ( B , ( _city ( A ) , _loc ( A , C ) , _const ( C , _stateid ( california ) ) , _population ( A , B ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( montana ) ) ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _state ( B ) , _const ( B , _stateid ( california ) ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( alaska ) ) ) )', '_answer ( A , _sum ( C , _state ( C ) , _area ( C ) , A ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( nebraska ) ) ) ) )', '_answer ( A , _smallest ( A , _state ( A ) ) )', '_answer ( A , _count ( B , ( _river ( B ) , _loc ( B , C ) , _const ( C , _stateid ( iowa ) ) ) , A ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( florida ) ) ) )', '_answer ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _state ( B ) , _const ( B , _stateid ( california ) ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _population ( A , B ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( colorado ) ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( hawaii ) ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( iowa ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _state ( B ) , _const ( C , _riverid ( mississippi ) ) , _traverse ( C , B ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( iowa ) ) ) )', '_answer ( A , _smallest ( B , ( _capital ( A ) , _population ( A , B ) ) ) )', '_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _state ( B ) , _loc ( C , B ) , _river ( C ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( hawaii ) ) ) )', '_answer ( A , ( _size ( B , A ) , _const ( B , _stateid ( alaska ) ) ) )', '_answer ( A , _smallest ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( wyoming ) ) ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _density ( A , B ) ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _next_to ( A , C ) , _const ( C , _stateid ( pennsylvania ) ) , _population ( A , B ) ) ) )', "_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( ' new york ' ) ) ) )", '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _countryid ( usa ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( texas ) ) , _loc ( C , A ) , _major ( C ) , _river ( C ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( maryland ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _largest ( C , ( _state ( B ) , _density ( B , C ) ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _city ( B ) , _const ( B , _cityid ( dallas , _ ) ) ) )', '_answer ( A , ( _population ( B , A ) , _most ( B , C , ( _state ( B ) , _next_to ( B , C ) , _state ( C ) ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _next_to ( B , C ) , _largest ( D , ( _state ( C ) , _population ( C , D ) ) ) ) , A ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _area ( A , B ) ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _riverid ( mississippi ) ) , _traverse ( B , A ) ) )', '_answer ( A , _sum ( C , _river ( C ) , _len ( C ) , A ) )', '_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( delaware ) ) , _river ( B ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( colorado ) ) ) )', '_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( colorado ) ) , _river ( B ) ) )', '_answer ( A , ( _density ( B , A ) , _state ( B ) ) )', '_answer ( A , _smallest ( B , ( _state ( A ) , _density ( A , B ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _city ( B ) , _const ( B , _cityid ( rochester , _ ) ) ) )', '_answer ( A , _lowest ( B , ( _state ( A ) , _loc ( B , A ) , _place ( B ) , _next_to ( A , C ) , _const ( C , _stateid ( idaho ) ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _smallest ( B , _state ( B ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( washington ) ) ) )', '_answer ( A , _count ( B , ( _const ( C , _stateid ( iowa ) ) , _next_to ( C , B ) , _state ( B ) ) , A ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _city ( B ) , _const ( B , _cityid ( austin , _ ) ) ) )', '_answer ( A , _count ( B , ( _river ( B ) , _loc ( B , C ) , _most ( C , D , ( _state ( C ) , _loc ( D , C ) , _river ( D ) ) ) ) , A ) )', "_answer ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ' new york ' ) ) ) )", '_answer ( A , ( _density ( B , A ) , _const ( B , _stateid ( maine ) ) ) )', '_answer ( A , ( _len ( B , A ) , _most ( B , C , ( _river ( B ) , _traverse ( B , C ) , _state ( C ) ) ) ) )', '_answer ( A , ( _capital ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _riverid ( missouri ) ) , _traverse ( B , A ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _area ( A , B ) ) ) )', '_answer ( A , ( _state ( A ) , _longest ( B , ( _river ( B ) , _loc ( B , C ) , _const ( C , _stateid ( texas ) ) ) ) , _traverse ( B , A ) ) )', "_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( ' new mexico ' ) ) ) )", '_answer ( A , ( _river ( A ) , _loc ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( texas ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _riverid ( missouri ) ) , _river ( B ) ) )', '_answer ( A , _smallest ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', "_answer ( A , ( _elevation ( B , A ) , _const ( B , _placeid ( ' mount mckinley ' ) ) ) )", '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( delaware ) ) ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( mississippi ) ) ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _cityid ( miami , _ ) ) , _loc ( B , A ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _state ( B ) , _const ( C , _riverid ( colorado ) ) , _river ( C ) , _traverse ( C , B ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _major ( B ) , _river ( B ) ) )', '_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( louisiana ) ) ) ) )', '_answer ( A , _largest ( B , ( _density ( A , B ) , _state ( A ) , _loc ( A , C ) , _const ( C , _countryid ( usa ) ) ) ) )', '_answer ( A , _longest ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( florida ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( tempe , az ) ) ) )', '_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _smallest ( B , ( _state ( B ) , _loc ( B , C ) , _const ( C , _countryid ( usa ) ) ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( alaska ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( nevada ) ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( pennsylvania ) ) ) )', '_answer ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( alaska ) ) ) )', '_answer ( A , _largest ( B , ( _state ( A ) , _capital ( A , B ) , _city ( B ) ) ) )', '_answer ( A , ( _loc ( B , A ) , _mountain ( B ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _next_to ( A , B ) , _state ( B ) ) ) )', '_answer ( A , ( _city ( A ) , _loc ( A , B ) , _state ( B ) , _loc ( C , B ) , _highest ( C , _place ( C ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( texas ) ) ) )', "_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ' new york ' ) ) ) )", '_answer ( A , _highest ( A , ( _mountain ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _state ( A ) , _loc ( B , A ) , _highest ( B , ( _place ( B ) , _loc ( B , C ) , _state ( C ) , _const ( D , _riverid ( colorado ) ) , _river ( D ) , _traverse ( D , C ) ) ) ) )', '_answer ( A , ( _loc ( B , A ) , _const ( B , _cityid ( dallas , _ ) ) ) )', '_answer ( A , _highest ( A , ( _mountain ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _state ( A ) , _const ( B , _riverid ( delaware ) ) , _river ( B ) , _traverse ( B , A ) ) )', '_answer ( A , ( _elevation ( B , A ) , _highest ( B , ( _place ( B ) , _loc ( B , C ) , _const ( C , _countryid ( usa ) ) ) ) ) )', '_answer ( A , _largest ( B , ( _city ( A ) , _population ( A , B ) ) ) )', "_answer ( A , ( _density ( B , A ) , _const ( B , _stateid ( ' new york ' ) ) ) )", "_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _cityid ( ' san francisco ' , _ ) ) ) ) )", "_answer ( A , _count ( B , ( _capital ( B ) , _const ( C , _stateid ( ' rhode island ' ) ) , _loc ( B , C ) ) , A ) )", '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( virginia ) ) ) ) )', '_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( ohio ) ) , _river ( B ) ) )', '_answer ( A , ( _len ( B , A ) , _longest ( B , ( _river ( B ) , _loc ( B , C ) , _const ( C , _stateid ( california ) ) ) ) ) )', '_answer ( A , _smallest ( B , ( _state ( A ) , _area ( A , B ) ) ) )', '_answer ( A , ( _river ( A ) , \\+ ( _traverse ( A , B ) , _const ( B , _stateid ( texas ) ) ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _loc ( B , A ) , _major ( B ) , _river ( B ) , _traverse ( B , A ) ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', "_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( ' new york ' , _ ) ) ) )", '_answer ( A , _largest ( B , ( _state ( A ) , _population ( A , B ) ) ) )', '_answer ( A , _largest ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( texas ) ) ) ) )', "_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ' rhode island ' ) ) ) ) )", '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( tucson , _ ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( maine ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( minneapolis , mn ) ) ) )', '_answer ( A , ( _river ( A ) , \\+ ( _traverse ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( colorado ) ) ) )', '_answer ( A , _longest ( A , ( _river ( A ) , _loc ( A , B ) , _largest ( B , _state ( B ) ) ) ) )', '_answer ( A , _smallest ( B , ( _state ( A ) , _density ( A , B ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _state ( B ) , _loc ( C , B ) , _lowest ( C , _place ( C ) ) ) )', '_answer ( A , ( _len ( B , A ) , _longest ( B , ( _river ( B ) , _loc ( B , C ) , _const ( C , _countryid ( usa ) ) ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( iowa ) ) ) , A ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _state ( B ) , _next_to ( B , C ) , _const ( C , _stateid ( georgia ) ) ) ) )', "_answer ( A , ( _const ( B , _cityid ( ' san antonio ' , _ ) ) , _loc ( B , A ) , _state ( A ) ) )", '_answer ( A , _most ( A , B , ( _river ( A ) , _traverse ( A , B ) , _state ( B ) ) ) )', '_answer ( A , ( _area ( B , A ) , _const ( B , _stateid ( ohio ) ) ) )', '_answer ( A , _longest ( A , ( _river ( A ) , _loc ( A , B ) , _most ( B , C , ( _state ( B ) , _loc ( C , B ) , _major ( C ) , _city ( C ) ) ) ) ) )', '_answer ( A , ( _state ( A ) , _longest ( B , _river ( B ) ) , _traverse ( B , A ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _const ( C , _countryid ( usa ) ) , _loc ( B , C ) ) , A ) )', '_answer ( A , ( _population ( B , A ) , _largest ( B , ( _city ( B ) , _loc ( B , C ) , _largest ( D , ( _state ( C ) , _area ( C , D ) ) ) ) ) ) )', '_answer ( A , ( _high_point ( B , A ) , _loc ( A , B ) , _const ( B , _stateid ( wyoming ) ) ) )', '_answer ( A , _highest ( A , ( _mountain ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( alabama ) ) ) )', '_answer ( A , _smallest ( A , _most ( A , B , ( _state ( A ) , _next_to ( A , B ) , _state ( B ) ) ) ) )', '_answer ( A , ( _river ( A ) , _loc ( A , B ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , _smallest ( B , ( _population ( A , B ) , _state ( A ) ) ) )', '_answer ( A , ( _density ( B , A ) , _largest ( B , _state ( B ) ) ) )', '_answer ( A , _most ( A , B , ( _river ( A ) , _traverse ( A , B ) , _state ( B ) ) ) )', "_answer ( A , ( _state ( A ) , _const ( B , _placeid ( ' mount mckinley ' ) ) , _loc ( B , A ) ) )", '_answer ( A , _most ( A , B , ( _river ( A ) , _traverse ( A , B ) , _state ( B ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _state ( B ) , _traverse ( C , B ) , _const ( C , _riverid ( mississippi ) ) ) )', '_answer ( A , _highest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( texas ) ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( illinois ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _const ( C , _stateid ( tennessee ) ) , _next_to ( C , B ) ) , A ) )', "_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( ' rhode island ' ) ) ) )", '_answer ( A , ( _population ( B , A ) , _const ( B , _cityid ( boulder , _ ) ) ) )', '_answer ( A , ( _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , ( _river ( A ) , _traverse ( A , B ) , _most ( B , C , ( _state ( B ) , _loc ( C , B ) , _city ( C ) ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _smallest ( C , ( _state ( B ) , _area ( B , C ) ) ) ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( michigan ) ) ) )', '_answer ( A , _largest ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( arkansas ) ) ) ) )', "_answer ( A , ( _len ( B , A ) , _const ( B , _riverid ( ' north platte ' ) ) , _river ( B ) ) )", '_answer ( A , _largest ( B , ( _state ( A ) , _next_to ( A , C ) , _const ( C , _stateid ( nevada ) ) , _population ( A , B ) ) ) )', "_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _stateid ( ' new york ' ) ) ) )", '_answer ( A , ( _river ( A ) , _traverse ( A , B ) , _fewest ( B , C , ( _state ( B ) , _loc ( C , B ) , _city ( C ) ) ) ) )', '_answer ( A , ( _population ( B , A ) , _major ( B ) , _city ( B ) , _loc ( B , C ) , _const ( C , _stateid ( texas ) ) ) )', '_answer ( A , ( _capital ( A ) , _loc ( A , B ) , _longest ( C , ( _state ( B ) , _loc ( C , B ) , _river ( C ) ) ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _loc ( B , A ) , _river ( B ) ) ) )', '_answer ( A , ( _population ( B , A ) , _capital ( B ) , _loc ( B , C ) , _const ( C , _stateid ( texas ) ) ) )', "_answer ( A , _largest ( B , ( _population ( A , B ) , _city ( A ) , _loc ( A , C ) , _const ( C , _stateid ( ' new mexico ' ) ) ) ) )", '_answer ( A , _count ( B , ( _state ( B ) , _loc ( C , B ) , _higher ( C , D ) , _place ( C ) , _highest ( D , ( _place ( D ) , _loc ( D , E ) , _state ( E ) , _loc ( F , E ) , _largest ( F , ( _capital ( F ) , _city ( F ) , _loc ( F , G ) , _const ( G , _countryid ( usa ) ) ) ) ) ) ) , A ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( mississippi ) ) ) )', '_answer ( A , _largest ( A , ( _city ( A ) , _loc ( A , B ) , _smallest ( B , ( _state ( B ) , _const ( C , _riverid ( mississippi ) ) , _traverse ( C , B ) ) ) ) ) )', "_answer ( A , ( _state ( A ) , _loc ( B , A ) , _city ( B ) , _const ( B , _cityid ( ' salt _lake _city ' , _ ) ) ) )", '_answer ( A , _smallest ( B , ( _state ( A ) , _population ( A , B ) ) ) )', '_answer ( A , ( _elevation ( B , A ) , _highest ( B , ( _place ( B ) , _loc ( B , C ) , _const ( C , _stateid ( montana ) ) ) ) ) )', '_answer ( A , _smallest ( A , ( _state ( A ) , _const ( B , _riverid ( mississippi ) ) , _river ( B ) , _traverse ( B , A ) ) ) )', '_answer ( A , ( _area ( B , A ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , ( _major ( A ) , _city ( A ) , _loc ( A , B ) , _const ( B , _stateid ( vermont ) ) ) )', '_answer ( A , _largest ( A , ( _capital ( A ) , _loc ( A , B ) , _const ( B , _countryid ( usa ) ) ) ) )', '_answer ( A , ( _loc ( B , A ) , _const ( B , _riverid ( chattahoochee ) ) , _river ( B ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( utah ) ) ) )', '_answer ( A , _count ( B , ( _state ( B ) , _loc ( B , C ) , _const ( C , _countryid ( usa ) ) ) , A ) )', '_answer ( A , ( _state ( A ) , _next_to ( A , B ) , _const ( B , _stateid ( arizona ) ) ) )', '_answer ( A , _lowest ( A , ( _place ( A ) , _loc ( A , B ) , _const ( B , _stateid ( arkansas ) ) ) ) )', '_answer ( A , _largest ( B , ( _population ( A , B ) , _state ( A ) ) ) )', '_answer ( A , ( _population ( B , A ) , _const ( B , _stateid ( mississippi ) ) ) )', '_answer ( A , _most ( A , B , ( _state ( A ) , _next_to ( A , B ) , _state ( B ) ) ) )', '_answer ( A , _largest ( B , ( _city ( A ) , _density ( A , B ) ) ) )', '_answer ( A , ( _area ( B , A ) , _const ( B , _stateid ( wisconsin ) ) ) )', '_answer ( A , ( _size ( B , A ) , _const ( B , _stateid ( texas ) ) ) )', '_answer ( A , _smallest ( B , ( _population ( B , A ) , _state ( B ) ) ) )', '_answer ( A , ( _density ( B , A ) , _state ( B ) , _longest ( C , ( _river ( C ) , _loc ( C , D ) , _const ( D , _countryid ( usa ) ) ) ) , _traverse ( C , B ) ) )']
    knowledge_based_evaluation(model_queries = model_queries, gold_queries = gold_queries)



'''
def load_dataset(filename, domain):
  dataset = []
  with open(filename) as f:
    for line in f:
      x, y = line.rstrip('\n').split('\t')
      if domain:
        y = domain.preprocess_lf(y)
      dataset.append((x, y))
  return dataset

def get_input_vocabulary(dataset):
  sentences = [x[0] for x in dataset]
  constructor = VOCAB_TYPES[OPTIONS.input_vocab_type]
  if OPTIONS.float32:
    return constructor(sentences, OPTIONS.input_embedding_dim,
                       unk_cutoff=OPTIONS.unk_cutoff,
                       float_type=numpy.float32)
  else:
    return constructor(sentences, OPTIONS.input_embedding_dim,
                       unk_cutoff=OPTIONS.unk_cutoff)

def get_output_vocabulary(dataset):
  sentences = [x[1] for x in dataset]
  constructor = VOCAB_TYPES[OPTIONS.output_vocab_type]
  if OPTIONS.float32:
    return constructor(sentences, OPTIONS.output_embedding_dim,
                       float_type=numpy.float32)
  else:
    return constructor(sentences, OPTIONS.output_embedding_dim)


def preprocess_data(model, raw):
  in_vocabulary = model.in_vocabulary
  out_vocabulary = model.out_vocabulary
  lexicon = model.lexicon

  data = []
  for raw_ex in raw:
    x_str, y_str = raw_ex
    ex = Example(x_str, y_str, in_vocabulary, out_vocabulary, lexicon,
                 reverse_input=OPTIONS.reverse_input)
    data.append(ex)
  return data
'''

'''
if __name__ == '__main__':
    args = parser.parse_args()
    # train(args)
    test(args)
'''